fig.height = 4
)
knitr::opts_chunk$set(
echo    = TRUE,
message = FALSE,
warning = FALSE,
fig.width  = 7,
fig.height = 4
)
knitr::opts_chunk$set(
echo    = TRUE,
message = FALSE,
warning = FALSE,
fig.width  = 7,
fig.height = 4
)
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
# Constants
earth_radius <- 6.371e6  # m
deg2rad      <- pi / 180
lat_mid      <- 41.5 * deg2rad
# GLOB grid (0.1°×0.1°)
dx_glob    <- earth_radius * cos(lat_mid) * (0.1 * deg2rad)
dy_glob    <- earth_radius *               (0.1 * deg2rad)
area_glob  <- dx_glob * dy_glob
# REG grid (0.1°×0.05°)
dx_reg    <- earth_radius * cos(lat_mid) * (0.1 * deg2rad)
dy_reg    <- earth_radius *               (0.05 * deg2rad)
area_reg  <- dx_reg * dy_reg
# Display areas
data.frame(
grid    = c("GLOB", "REG"),
lon_deg = c(0.1, 0.1),
lat_deg = c(0.1, 0.05),
area_m2 = c(area_glob, area_reg)
)
60*60*10^6
60*60**60*10^6
60*60*60*10^6
10^6*60*60*24
print(10^6*60*60*24)
10^6*60*60*24
knitr::opts_chunk$set(
echo      = TRUE,
message   = FALSE,
warning   = FALSE,
fig.width = 7,
fig.height = 4
)
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time]  (kg m⁻² s⁻¹)
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time]  (kg m⁻² s⁻¹)
dim(glob_raw)  # should be 130 × 130 × 365
dim(reg_raw)   # should be 130 × 260 × 365
# constants
Re       <- 6.371e6   # Earth radius [m]
deg2rad  <- pi/180
phi      <- 41.5 * deg2rad
# helper to convert Δdeg → m
arc <- function(dlat, dlon) {
dx <- Re * cos(phi) * (dlon * deg2rad)   # east‑west length
dy <- Re *            (dlat * deg2rad)   # north‑south length
dx * dy                                  # area m²
}
area_glob <- arc(0.1 , 0.1 )   # 0.1° × 0.1°
area_reg  <- arc(0.05, 0.1 )   # 0.05° × 0.1°
knitr::kable(data.frame(Grid=c("GLOB","REG"),
dlon=c(0.1,0.1), dlat=c(0.1,0.05),
area_km2=c(area_glob,area_reg)/1e6),
caption="Approximate cell area at 41.5 °N")
# constants
Re       <- 6.371e6   # Earth radius [m]
deg2rad  <- pi/180
phi      <- 41.5 * deg2rad
# helper to convert Δdeg → m
arc <- function(dlat, dlon) {
dx <- Re * cos(phi) * (dlon * deg2rad)   # east‑west length
dy <- Re *            (dlat * deg2rad)   # north‑south length
dx * dy                                  # area m²
}
area_glob <- arc(0.1 , 0.1 )   # 0.1° × 0.1°
area_reg  <- arc(0.05, 0.1 )   # 0.05° × 0.1°
knitr::kable(data.frame(Grid=c("GLOB","REG"),
dlon=c(0.1,0.1), dlat=c(0.1,0.05),
area_km2=c(area_glob,area_reg)/1e6),
caption="Approximate cell area at 41.5°N")
secs_day  <- 86400
glob_mass <- glob_raw * area_glob * secs_day   # kg/cell/day
reg_mass  <- reg_raw  * area_reg  * secs_day   # kg/cell/day
cat("GLOB range [kg/day]:", sprintf("%.2e", range(glob_mass, na.rm=TRUE)),"\n")
cat("REG  range [kg/day]:", sprintf("%.2e", range(reg_mass,  na.rm=TRUE)),"\n")
secs_day  <- 86400
glob_mass <- glob_raw * area_glob * secs_day   # kg/cell/day
reg_mass  <- reg_raw  * area_reg  * secs_day   # kg/cell/day
cat("GLOB range [kg/day]:", sprintf("%.2e", range(glob_mass, na.rm=TRUE)),"\n")
cat("REG  range [kg/day]:", sprintf("%.2e", range(reg_mass,  na.rm=TRUE)),"\n")
glob_daily_tot <- apply(glob_mass, 3, sum, na.rm=TRUE)
reg_daily_tot  <- apply(reg_mass , 3, sum, na.rm=TRUE)
plot(glob_daily_tot, type="l", col="#1f78b4",
ylim=range(c(glob_daily_tot, reg_daily_tot)),
xlab="Day of Year", ylab="NOₓ [kg/day]",
main="Daily NOₓ totals – Italy bounding box")
lines(reg_daily_tot, col="#e31a1c")
legend("topright", c("GLOB 2023","REG 2022"), col=c("#1f78b4","#e31a1c"), lty=1, cex=0.8)
ratio <- glob_daily_tot / reg_daily_tot
summary(ratio)
quantile(ratio, probs=c(0.01,0.25,0.5,0.75,0.99))
library(ggplot2)
library(viridis)   # for discrete viridis_c()
plot_day_emissions <- function(data_matrix, day_index, title=NULL){
lon_vals <- as.numeric(dimnames(data_matrix)[[1]])
lat_vals <- as.numeric(dimnames(data_matrix)[[2]])
df <- expand.grid(lon=lon_vals, lat=lat_vals)
df$value <- as.vector(data_matrix[,,day_index])
ggplot(df, aes(lon, lat, fill=value))+
geom_tile()+
scale_fill_viridis(trans="log10", name="kg/day")+
coord_fixed(1.25)+
labs(title=title, x="Longitude", y="Latitude")+
theme_minimal()
}
plot_day_emissions(glob_mass, 16, "CAMS‑GLOB NOₓ – 16 Jan 2023")
plot_day_emissions(reg_mass, 16, "CAMS‑REG NOₓ – 16 Jan 2022")
SumAllSectors_NOx_2019 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2019.rds")
dimnames(SumAllSectors_NOx_2019)
library(ggplot2)
plot_day_emissions <- function(data_matrix, day_index, title = NULL, save_path = NULL) {
# Estrai la matrice del giorno
daily_data <- data_matrix[,,day_index]
# Estrai le coordinate da dimnames
lon_vals <- as.numeric(dimnames(data_matrix)[[1]])
lat_vals <- as.numeric(dimnames(data_matrix)[[2]])
# Crea il dataframe
df <- expand.grid(
lon = lon_vals,
lat = lat_vals
)
df$value <- as.vector(daily_data)
# Plot base
p <- ggplot(df, aes(x = lon, y = lat, fill = value)) +
geom_tile() +
scale_fill_viridis_c(name = "Emissions", trans = "log10") +
coord_fixed(1.3) +
theme_minimal() +
labs(
title = title %||% paste("Emissions - Day", day_index),
x = "Longitude",
y = "Latitude"
)
# Salva o mostra
if (!is.null(save_path)) {
ggsave(save_path, plot = p, dpi = 300, width = 8, height = 6)
} else {
print(p)
}
}
plot_day_emissions(
data_matrix = SumAllSectors_NOx_2019 * 1e6 * 60 * 60 * 24,
day_index = 16,
title = "NO₂ Emissions - 16 Jan 2019"
)
GLOB_daily_nox_sum_2023 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/DailyFromGLOB/nox/GLOB_daily_nox_sum_2023.rds")
dimnames(GLOB_daily_nox_sum_2023)
SumAllSectors_NOx_2019 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2019.rds")
SumAllSectors_NOx_2022 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2022.rds")
dimnames(SumAllSectors_NOx_2022)
###############################################################################
## PHASE 7: STACK DAILY DATA ALONG YEARS (SEQUENTIALLY) AND SUM ALL SECTORS
###############################################################################
start_time_phase7 <- Sys.time()
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2000
end_year       <- 2022
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# A) Stack daily data per ogni (sector, pollutant)
###############################################################################
for (sector in sectors) {
for (pollutant in polls_stack) {
StackDailyData(
input_folder = input_folder,
sector       = sector,
pollutant    = pollutant,
start_year   = start_year,
end_year     = end_year
)
}
}
cat("==> PHASE 7A: Stacking of daily data for all sectors/pollutants completed.\n\n")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
knitr::opts_chunk$set(
echo      = TRUE,
message   = FALSE,
warning   = FALSE,
fig.width = 7,
fig.height = 4
)
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2000
end_year       <- 2022
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2019
end_year       <- 2019
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2019
end_year       <- 2020
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
SumAllSectors_NOx_2009 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2009.rds")
SumAllSectors_NOx_2009 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2009.rds")
###############################################################################
## MAIN SCRIPT: main.R
## Version: 2.0.0
## This script is organized in multiple PHASES, each timed for benchmark purposes.
## No lines of your original code are removed, only reorganized.
###############################################################################
# 1. CONFIGURATION & SETUP
source("Config.R")
source("Utils.R")
###############################################################################
## PHASE 1: CONFIGURATION, SETUP STRUCTURE, AND CAMS-REG-ANT YEARLY DATA EXTRACTION
###############################################################################
start_time_phase1 <- Sys.time()
# Get lon/lat indices for REG (this is your existing routine)
get_lon_lat_indices("Data/Raw/CAMS-REG-ANT/CAMS-REG-ANT_EUR_0.05x0.1_anthro_nox_v8.0_yearly.nc", boundary)
# 1. CONFIGURATION & SETUP
source("Config.R")
source("Utils.R")
###############################################################################
## PHASE 1: CONFIGURATION, SETUP STRUCTURE, AND CAMS-REG-ANT YEARLY DATA EXTRACTION
###############################################################################
start_time_phase1 <- Sys.time()
# 2. SETUP STRUCTURE
source("setup_structure.R")
# 3. NEW CAMS-REG-ANT YEARLY DATA EXTRACTION
source("ExtractANT/ExtractANT.R")
nc_directory <- "Data/Raw/CAMS-REG-ANT/"
pollutant_names <- c("nh3", "ch4", "co", "co2_bf", "co2_ff", "nmvoc", "nox", "pm2_5", "pm10", "so2")
lon_lat_idx <- readRDS("Data/Processed/lon_lat_idx.rds")
for (pollutant_name in pollutant_names) {
nc_file_paths <- list.files(nc_directory, pattern = paste0(pollutant_name, "_v"), full.names = TRUE)
nc_file_paths <- nc_file_paths[order(as.numeric(gsub(".*_v([0-9.]+)_.*", "\\1", nc_file_paths)))]
all_data_list <- list()
for (nc_file_path in nc_file_paths) {
all_data_list <- add_new_years_data_updated(nc_file_path, all_data_list)
}
all_data_list_final <- lapply(all_data_list, function(x) x$data)
all_data_matrix <- build_yearly_matrix(all_data_list_final, lon_lat_idx)
save_path <- paste0("Data/Processed/ANT_data/REG_ANT_yearly_data_", pollutant_name, ".rds")
saveRDS(all_data_matrix, file = save_path)
rm(all_data_matrix, all_data_list, all_data_list_final)
gc()
}
cat("All REG RDS files saved.\n")
end_time_phase1 <- Sys.time()
cat("==> PHASE 1 completed in:", round(difftime(end_time_phase1, start_time_phase1, units="secs"), 2), "seconds.\n\n")
#!/usr/bin/env Rscript
###############################################################################
## PHASE 2: CAMS-GLOB-ANT → GNFR-monthly → GNFR-daily (SUPER DEBUG)
###############################################################################
start_time <- Sys.time()
library(ncdf4); library(abind); library(lubridate)
# Carica sorgenti
source("ExtractANT/ExtractGLOB.R")    # build_5D_GLOB_from_files()
source("MapGLOBtoGNFR.R")             # map_GLOB_to_GNFR()
source("GLOB_MonthlyToDaily.R")       # CreateWeeklyProfile(), MonthlyToDaily()
# Parametri
glob_nc_dir        <- "Data/Raw/CAMS-GLOB-ANT"
ant_out_dir        <- "Data/Processed/ANT_data"
lonlat_idx_rds     <- "Data/Processed/lon_lat_idx_GLOB.rds"
weekly_csv         <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
tempo_base_dir     <- "Data/Processed/TEMPO_data"
daily_out_base_dir <- "Data/Processed/DAILY_data/DailyFromGLOB"
# Helper anno/file
get_year <- function(f) as.integer(sub(".*_(\\d{4})\\.nc$", "\\1", basename(f)))
get_poll <- function(f) tolower(sub(".*anthro_([^_]+)_.*","\\1",basename(f)))
nc_files <- list.files(glob_nc_dir, "\\.nc$", full.names=TRUE)
cat("DEBUG: Found NetCDF files:\n"); print(nc_files); cat("\n")
if(!length(nc_files)) stop("No .nc in ", glob_nc_dir)
unique_polls <- unique(sapply(nc_files, get_poll))
cat("DEBUG: Detected pollutants:", unique_polls, "\n\n")
for(poll in unique_polls){
POL <- toupper(poll)
cat("\n============================\n")
cat("START Pollutant:", POL, "\n")
# 1) Estrarre 5D monthly GLOB
these_nc   <- nc_files[sapply(nc_files,get_poll)==poll]
raw5d_file <- file.path(ant_out_dir, sprintf("GLOB_ANT_monthly_data_%s.rds",poll))
cat("DEBUG: these_nc:\n"); print(these_nc)
cat("DEBUG: raw5d_file =", raw5d_file, "\n")
data5d <- build_5D_GLOB_from_files(
netcdf_files      = these_nc,
boundary          = boundary,
sector_names_GLOB = sector_names_GLOB,
output_file       = raw5d_file
)
cat("DEBUG: data5d dim ="); print(dim(data5d))
cat("DEBUG: data5d dimnames lon,lat,sector,month,year:\n")
print(lapply(dimnames(data5d), function(x) head(x,3)))
cat("\n")
# 2) Map GLOB→GNFR
gnfr5d_file <- file.path(ant_out_dir, sprintf("GLOB_GNFR_ANT_monthly_data_%s.rds",poll))
cat("DEBUG: gnfr5d_file =", gnfr5d_file, "\n")
gnfr5d <- map_GLOB_to_GNFR(data5d)
cat("DEBUG: gnfr5d dim ="); print(dim(gnfr5d))
cat("DEBUG: gnfr5d dimnames head:\n")
print(lapply(dimnames(gnfr5d), function(x) head(x,3)))
saveRDS(gnfr5d, gnfr5d_file)
cat("DEBUG: after saveRDS(gnfr5d): exists? ", file.exists(gnfr5d_file), "\n\n")
# 3) Monthly→Daily GNFR
cat("DEBUG: Preparing MonthlyToDaily for", POL, "\n")
weekly_dir <- file.path(tempo_base_dir,"DailySimplifiedProfiles",POL,"WeeklyProfiles")
weekly_rds <- file.path(weekly_dir,paste0("S_W_simplified_",POL,".rds"))
cat("DEBUG: weekly_rds =", weekly_rds, "\n")
if(!file.exists(weekly_rds)){
cat("DEBUG: Creating weekly profile...\n")
CreateWeeklyProfile(weekly_csv,poll,weekly_dir)
}
out_daily <- file.path(daily_out_base_dir,poll)
years_avail <- sort(unique(get_year(these_nc)))
cat("DEBUG: years_avail =", years_avail, "\n")
MonthlyToDaily(
monthly_rds    = gnfr5d_file,
weekly_rds     = weekly_rds,
lonlat_idx_rds = lonlat_idx_rds,
pollutant      = POL,
output_dir     = out_daily,
years          = years_avail
)
# verifica cartella
cat("DEBUG: Listing out_daily:\n")
print(list.files(out_daily, recursive=TRUE))
cat("Completed pollutant:", POL, "\n")
}
## PHASE 2: CAMS-GLOB-ANT → GNFR-monthly → GNFR-daily (SUPER DEBUG)
###############################################################################
start_time <- Sys.time()
library(ncdf4); library(abind); library(lubridate)
# Carica sorgenti
source("ExtractANT/ExtractGLOB.R")    # build_5D_GLOB_from_files()
source("MapGLOBtoGNFR.R")             # map_GLOB_to_GNFR()
source("GLOB_MonthlyToDaily.R")       # CreateWeeklyProfile(), MonthlyToDaily()
# Parametri
glob_nc_dir        <- "Data/Raw/CAMS-GLOB-ANT"
ant_out_dir        <- "Data/Processed/ANT_data"
lonlat_idx_rds     <- "Data/Processed/lon_lat_idx_GLOB.rds"
weekly_csv         <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
tempo_base_dir     <- "Data/Processed/TEMPO_data"
daily_out_base_dir <- "Data/Processed/DAILY_data/DailyFromGLOB"
# Helper anno/file
get_year <- function(f) as.integer(sub(".*_(\\d{4})\\.nc$", "\\1", basename(f)))
get_poll <- function(f) tolower(sub(".*anthro_([^_]+)_.*","\\1",basename(f)))
nc_files <- list.files(glob_nc_dir, "\\.nc$", full.names=TRUE)
cat("DEBUG: Found NetCDF files:\n"); print(nc_files); cat("\n")
if(!length(nc_files)) stop("No .nc in ", glob_nc_dir)
unique_polls <- unique(sapply(nc_files, get_poll))
cat("DEBUG: Detected pollutants:", unique_polls, "\n\n")
for(poll in unique_polls){
POL <- toupper(poll)
cat("\n============================\n")
cat("START Pollutant:", POL, "\n")
# 1) Estrarre 5D monthly GLOB
these_nc   <- nc_files[sapply(nc_files,get_poll)==poll]
raw5d_file <- file.path(ant_out_dir, sprintf("GLOB_ANT_monthly_data_%s.rds",poll))
cat("DEBUG: these_nc:\n"); print(these_nc)
cat("DEBUG: raw5d_file =", raw5d_file, "\n")
data5d <- build_5D_GLOB_from_files(
netcdf_files      = these_nc,
boundary          = boundary,
sector_names_GLOB = sector_names_GLOB,
output_file       = raw5d_file
)
cat("DEBUG: data5d dim ="); print(dim(data5d))
cat("DEBUG: data5d dimnames lon,lat,sector,month,year:\n")
print(lapply(dimnames(data5d), function(x) head(x,3)))
cat("\n")
# 2) Map GLOB→GNFR
gnfr5d_file <- file.path(ant_out_dir, sprintf("GLOB_GNFR_ANT_monthly_data_%s.rds",poll))
cat("DEBUG: gnfr5d_file =", gnfr5d_file, "\n")
gnfr5d <- map_GLOB_to_GNFR(data5d)
cat("DEBUG: gnfr5d dim ="); print(dim(gnfr5d))
cat("DEBUG: gnfr5d dimnames head:\n")
print(lapply(dimnames(gnfr5d), function(x) head(x,3)))
saveRDS(gnfr5d, gnfr5d_file)
cat("DEBUG: after saveRDS(gnfr5d): exists? ", file.exists(gnfr5d_file), "\n\n")
# 3) Monthly→Daily GNFR
cat("DEBUG: Preparing MonthlyToDaily for", POL, "\n")
weekly_dir <- file.path(tempo_base_dir,"DailySimplifiedProfiles",POL,"WeeklyProfiles")
weekly_rds <- file.path(weekly_dir,paste0("S_W_simplified_",POL,".rds"))
cat("DEBUG: weekly_rds =", weekly_rds, "\n")
if(!file.exists(weekly_rds)){
cat("DEBUG: Creating weekly profile...\n")
CreateWeeklyProfile(weekly_csv,poll,weekly_dir)
}
out_daily <- file.path(daily_out_base_dir,poll)
years_avail <- sort(unique(get_year(these_nc)))
cat("DEBUG: years_avail =", years_avail, "\n")
MonthlyToDaily(
monthly_rds    = gnfr5d_file,
weekly_rds     = weekly_rds,
lonlat_idx_rds = lonlat_idx_rds,
pollutant      = POL,
output_dir     = out_daily,
years          = years_avail
)
# verifica cartella
cat("DEBUG: Listing out_daily:\n")
print(list.files(out_daily, recursive=TRUE))
cat("Completed pollutant:", POL, "\n")
}
cat("\n==> All done in", round(difftime(Sys.time(), start_time, units="secs"),2), "sec.\n")
GLOB_daily_nox_sum_2023 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/DailyFromGLOB/nox/GLOB_daily_nox_sum_2023.rds")
dimnames(GLOB_daily_nox_sum_2023)
