sum(SumAllSectors_NOx_2022)/sum(GLOB_daily_nox_sum_2023)
sum(SumAllSectors_NOx_2022)
GLOB_ANT_monthly_data_nox <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/ANT_data/GLOB_ANT_monthly_data_nox.rds")
sum(GLOB_ANT_monthly_data_nox)
GLOB_GNFR_ANT_monthly_data_nox <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/ANT_data/GLOB_GNFR_ANT_monthly_data_nox.rds")
sum(GLOB_GNFR_ANT_monthly_data_nox)
REG_ANT_yearly_data_nox <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/ANT_data/REG_ANT_yearly_data_nox.rds")
sum(REG_ANT_yearly_data_nox)
dim(REG_ANT_yearly_data_nox)
sum(REG_ANT_yearly_data_nox[,,,23])
dim(GLOB_ANT_monthly_data_nox)
sum(GLOB_ANT_monthly_data_nox[,,,,3])
sum(GLOB_ANT_monthly_data_nox[,,,,3])/12
sum(GLOB_ANT_monthly_data_nox[,,,1,3])
sum(REG_ANT_yearly_data_nox[,,,23])
sum(REG_ANT_yearly_data_nox[,,,23])/sum(GLOB_ANT_monthly_data_nox[,,,1,3])
sum(REG_ANT_yearly_data_nox[,,,23])/sum(GLOB_ANT_monthly_data_nox[,,,,3]/12)
dim(GLOB_daily_nox_sum_2023)
dim(SumAllSectors_NOx_2022)
boundary
glob_daily_tot <- apply(GLOB_daily_nox_sum_2023, 3, sum)
reg_daily_tot  <- apply(SumAllSectors_NOx_2022, 3, sum)
plot(glob_daily_tot, type="l", col="blue", ylim=range(c(glob_daily_tot, reg_daily_tot)))
lines(reg_daily_tot, col="red")
legend("topright", legend=c("GLOB", "REG"), col=c("blue", "red"), lty=1)
glob_raw <- GLOB_daily_nox_sum_2023  # [lon, lat, time]
# Calcolo area in m²
lat_mid <- 41.5
earth_radius <- 6371000
deg2rad <- pi / 180
dx <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy <- earth_radius * (0.1 * deg2rad)
area_cella <- dx * dy  # m²
# Conversione
glob_converted <- glob_raw * area_cella * 86400  # ora in kg/giorno
# Ora puoi confrontare!
reg_raw <- SumAllSectors_NOx_2022
# Somme giornaliere
glob_daily_tot <- apply(glob_converted, 3, sum)
reg_daily_tot  <- apply(reg_raw, 3, sum)
# Plot confronto
plot(glob_daily_tot, type="l", col="blue", ylim=range(c(glob_daily_tot, reg_daily_tot)))
lines(reg_daily_tot, col="red")
legend("topright", legend=c("GLOB (converted)", "REG"), col=c("blue", "red"), lty=1)
# Rapporto medio
mean(glob_daily_tot / reg_daily_tot)
# 1) Carica i due dataset
glob_raw <- GLOB_daily_nox_sum_2023  # [lon, lat, time]
reg_raw <- SumAllSectors_NOx_2022
# 2) Conversione GLOB: da kg/m²/s -> kg/giorno per cella
lat_mid      <- 41.5           # lat media italiana
earth_radius <- 6371000        # raggio terrestre (m)
deg2rad      <- pi / 180
# dimensioni della cella in metri
dx <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy <- earth_radius *               (0.1 * deg2rad)
area_cell <- dx * dy              # m²
# conversione flusso -> massa giornaliera
glob_conv <- glob_raw * area_cell * 86400
# 3) Conversione REG: da Mg/anno per cella -> kg/giorno per cella
#    1 Mg = 1e6 g = 1e3 kg; poi divido per 365 giorni
reg_conv <- reg_raw * 1e3 / 365
# 4) Calcola i totali giornalieri (somma su lon e lat)
glob_daily_tot <- apply(glob_conv, 3, sum, na.rm = TRUE)
reg_daily_tot  <- apply(reg_conv,  3, sum, na.rm = TRUE)
# 5) Plot di confronto
plot(glob_daily_tot, type = "l", col = "blue",
ylim = range(c(glob_daily_tot, reg_daily_tot)),
ylab = "Total NOx kg/day", xlab = "Day index",
main = "Confronto GLOB vs REG (finto stesso anno)")
lines(reg_daily_tot, col = "red")
legend("topright",
legend = c("GLOB (converted)", "REG (converted)"),
col    = c("blue", "red"),
lty    = 1)
# 6) Rapporto medio GLOB/REG
mean_ratio <- mean(glob_daily_tot / reg_daily_tot, na.rm = TRUE)
cat("Mean GLOB / REG =", round(mean_ratio, 2), "\n")
dim(reg_conv)
dimnames(reg_conv)
# ====================================================================
# Confronto giornaliero CAMS-GLOB vs CAMS-REG per NOₓ
# ====================================================================
# 1) Carica i dataset già in memoria (oppure sostituisci con readRDS se necessario)
glob_raw <- GLOB_daily_nox_sum_2023    # [lon, lat, time], flusso kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022     # ipotesi: già in kg/giorno per cella
# 2) Controllo rapido delle unità di REG
print("Summary di reg_raw (verifica ordine di grandezza):")
print(summary(reg_raw))
# Se vedi valori ~1e5–1e7, reg_raw è già in kg/giorno per cella.
# In tal caso non fare conversione e usa direttamente:
reg_conv <- reg_raw
# Altrimenti, se fossero in Mg/anno per cella:
# reg_conv <- reg_raw * 1e3 / 365
# 3) Conversione GLOB: da kg/m²/s -> kg/giorno per cella
lat_mid      <- 41.5         # latitudine media italiana
earth_radius <- 6371000      # raggio terrestre (m)
deg2rad      <- pi / 180
# Calcola dimensioni della cella 0.1°×0.1° in metri
dx <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy <- earth_radius *               (0.1 * deg2rad)
area_cell <- dx * dy              # area di ogni cella (m²)
# Applica conversione flusso -> massa giornaliera (kg/giorno)
glob_conv <- glob_raw * area_cell * 86400
# 4) Somma giornaliera su tutte le celle (lon, lat)
glob_daily_tot <- apply(glob_conv, 3, sum, na.rm = TRUE)
reg_daily_tot  <- apply(reg_conv,  3, sum, na.rm = TRUE)
# 5) Plot di confronto
plot(glob_daily_tot, type = "l", col = "blue",
ylim = range(c(glob_daily_tot, reg_daily_tot)),
xlab = "Indice giorno (1–365)",
ylab = "Emissioni totali NOₓ [kg/giorno]",
main = "Confronto giornaliero CAMS-GLOB vs CAMS-REG (finto stesso anno)")
lines(reg_daily_tot, col = "red")
legend("topright",
legend = c("GLOB (converted)", "REG (raw or converted)"),
col    = c("blue", "red"),
lty    = 1,
cex    = 0.8)
# 6) Rapporto medio GLOB/REG
mean_ratio <- mean(glob_daily_tot / reg_daily_tot, na.rm = TRUE)
cat("Rapporto medio GLOB / REG =", round(mean_ratio, 2), "\n")
# --- Dati già caricati ---
glob_raw <- GLOB_daily_nox_sum_2023    # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022     # [lon, lat, time], kg/m²/s
# --- Parametri comuni ---
lat_mid      <- 41.5        # latitudine media italiana
earth_radius <- 6371000     # raggio terrestre (m)
deg2rad      <- pi / 180
# --- Calcolo aree cellule ---
# GLOB: 0.1° × 0.1°
dx_glob <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy_glob <- earth_radius                        * (0.1 * deg2rad)
area_glob <- dx_glob * dy_glob
# REG: 0.1° (lon) × 0.05° (lat)
dx_reg <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy_reg <- earth_radius                        * (0.05 * deg2rad)
area_reg <- dx_reg * dy_reg
# --- Conversione in kg/giorno ---
glob_conv <- glob_raw * area_glob * 86400
reg_conv  <- reg_raw  * area_reg * 86400
# --- Totali giornalieri ---
glob_daily_tot <- apply(glob_conv, 3, sum, na.rm=TRUE)
reg_daily_tot  <- apply(reg_conv,  3, sum, na.rm=TRUE)
# --- Plot di confronto ---
plot(glob_daily_tot, type="l", col="blue",
ylim=range(c(glob_daily_tot, reg_daily_tot)),
xlab="Giorno dell'anno", ylab="NOₓ [kg/giorno]",
main="Confronto GLOB vs REG (stesso anno)")
lines(reg_daily_tot, col="red")
legend("topright",
legend=c("GLOB", "REG"),
col=c("blue","red"), lty=1)
# --- Rapporto medio ---
cat("Mean GLOB/REG =", mean(glob_daily_tot/reg_daily_tot), "\n")
# --- Dati già caricati ---
glob_raw <- GLOB_daily_nox_sum_2023    # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022     # [lon, lat, time], kg/m²/s
# --- Parametri comuni ---
lat_mid      <- 41.5        # latitudine media italiana
earth_radius <- 6371000     # raggio terrestre (m)
deg2rad      <- pi / 180
# --- Calcolo aree cellule ---
# GLOB: 0.1° × 0.1°
dx_glob <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy_glob <- earth_radius                        * (0.1 * deg2rad)
area_glob <- dx_glob * dy_glob
# REG: 0.1° (lon) × 0.05° (lat)
dx_reg <- earth_radius * cos(lat_mid * deg2rad) * (0.1 * deg2rad)
dy_reg <- earth_radius                        * (0.05 * deg2rad)
area_reg <- dx_reg * dy_reg
# --- Conversione in kg/giorno ---
glob_conv <- glob_raw * area_glob * 86400
reg_conv  <- reg_raw  * area_reg * 86400
# --- Totali giornalieri ---
glob_daily_tot <- apply(glob_conv, 3, sum, na.rm=TRUE)
reg_daily_tot  <- apply(reg_conv,  3, sum, na.rm=TRUE)
# --- Plot di confronto ---
plot(glob_daily_tot, type="l", col="blue",
ylim=range(c(glob_daily_tot, reg_daily_tot)),
xlab="Giorno dell'anno", ylab="NOₓ [kg/giorno]",
main="Confronto GLOB vs REG (stesso anno)")
lines(reg_daily_tot, col="red")
legend("topright",
legend=c("GLOB", "REG"),
col=c("blue","red"), lty=1)
# --- Rapporto medio ---
cat("Mean GLOB/REG =", mean(glob_daily_tot/reg_daily_tot), "\n")
# dopo aver calcolato glob_daily_tot e reg_daily_tot
ratio <- glob_daily_tot / reg_daily_tot
# Statistiche basilari sul rapporto
cat("Rapporto minimo   =", round(min(ratio),2), "\n")
cat("1° quartile      =", round(quantile(ratio, .25),2), "\n")
cat("Mediana          =", round(median(ratio),2), "\n")
cat("3° quartile      =", round(quantile(ratio, .75),2), "\n")
cat("Rapporto massimo =", round(max(ratio),2), "\n")
cat("Rapporto medio   =", round(mean(ratio),2), "\n")
Below is a self-contained **R Markdown** document you can save as e.g. `compare_glob_reg.Rmd`. It walks through every step—loading data, computing cell areas, converting from flux to mass, summing daily totals, plotting, and summarising the GLOB/REG ratio—accompanied by detailed English explanations.
knitr::opts_chunk$set(
echo    = TRUE,
message = FALSE,
warning = FALSE,
fig.width  = 7,
fig.height = 4
)
knitr::opts_chunk$set(
echo    = TRUE,
message = FALSE,
warning = FALSE,
fig.width  = 7,
fig.height = 4
)
knitr::opts_chunk$set(
echo    = TRUE,
message = FALSE,
warning = FALSE,
fig.width  = 7,
fig.height = 4
)
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time], kg/m²/s
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time], kg/m²/s
dim(glob_raw)  # expect 130 x 130 x 365
dim(reg_raw)   # expect 130 x 260 x 365
# Constants
earth_radius <- 6.371e6  # m
deg2rad      <- pi / 180
lat_mid      <- 41.5 * deg2rad
# GLOB grid (0.1°×0.1°)
dx_glob    <- earth_radius * cos(lat_mid) * (0.1 * deg2rad)
dy_glob    <- earth_radius *               (0.1 * deg2rad)
area_glob  <- dx_glob * dy_glob
# REG grid (0.1°×0.05°)
dx_reg    <- earth_radius * cos(lat_mid) * (0.1 * deg2rad)
dy_reg    <- earth_radius *               (0.05 * deg2rad)
area_reg  <- dx_reg * dy_reg
# Display areas
data.frame(
grid    = c("GLOB", "REG"),
lon_deg = c(0.1, 0.1),
lat_deg = c(0.1, 0.05),
area_m2 = c(area_glob, area_reg)
)
60*60*10^6
60*60**60*10^6
60*60*60*10^6
10^6*60*60*24
print(10^6*60*60*24)
10^6*60*60*24
knitr::opts_chunk$set(
echo      = TRUE,
message   = FALSE,
warning   = FALSE,
fig.width = 7,
fig.height = 4
)
glob_raw <- GLOB_daily_nox_sum_2023   # [lon, lat, time]  (kg m⁻² s⁻¹)
reg_raw  <- SumAllSectors_NOx_2022    # [lon, lat, time]  (kg m⁻² s⁻¹)
dim(glob_raw)  # should be 130 × 130 × 365
dim(reg_raw)   # should be 130 × 260 × 365
# constants
Re       <- 6.371e6   # Earth radius [m]
deg2rad  <- pi/180
phi      <- 41.5 * deg2rad
# helper to convert Δdeg → m
arc <- function(dlat, dlon) {
dx <- Re * cos(phi) * (dlon * deg2rad)   # east‑west length
dy <- Re *            (dlat * deg2rad)   # north‑south length
dx * dy                                  # area m²
}
area_glob <- arc(0.1 , 0.1 )   # 0.1° × 0.1°
area_reg  <- arc(0.05, 0.1 )   # 0.05° × 0.1°
knitr::kable(data.frame(Grid=c("GLOB","REG"),
dlon=c(0.1,0.1), dlat=c(0.1,0.05),
area_km2=c(area_glob,area_reg)/1e6),
caption="Approximate cell area at 41.5 °N")
# constants
Re       <- 6.371e6   # Earth radius [m]
deg2rad  <- pi/180
phi      <- 41.5 * deg2rad
# helper to convert Δdeg → m
arc <- function(dlat, dlon) {
dx <- Re * cos(phi) * (dlon * deg2rad)   # east‑west length
dy <- Re *            (dlat * deg2rad)   # north‑south length
dx * dy                                  # area m²
}
area_glob <- arc(0.1 , 0.1 )   # 0.1° × 0.1°
area_reg  <- arc(0.05, 0.1 )   # 0.05° × 0.1°
knitr::kable(data.frame(Grid=c("GLOB","REG"),
dlon=c(0.1,0.1), dlat=c(0.1,0.05),
area_km2=c(area_glob,area_reg)/1e6),
caption="Approximate cell area at 41.5°N")
secs_day  <- 86400
glob_mass <- glob_raw * area_glob * secs_day   # kg/cell/day
reg_mass  <- reg_raw  * area_reg  * secs_day   # kg/cell/day
cat("GLOB range [kg/day]:", sprintf("%.2e", range(glob_mass, na.rm=TRUE)),"\n")
cat("REG  range [kg/day]:", sprintf("%.2e", range(reg_mass,  na.rm=TRUE)),"\n")
secs_day  <- 86400
glob_mass <- glob_raw * area_glob * secs_day   # kg/cell/day
reg_mass  <- reg_raw  * area_reg  * secs_day   # kg/cell/day
cat("GLOB range [kg/day]:", sprintf("%.2e", range(glob_mass, na.rm=TRUE)),"\n")
cat("REG  range [kg/day]:", sprintf("%.2e", range(reg_mass,  na.rm=TRUE)),"\n")
glob_daily_tot <- apply(glob_mass, 3, sum, na.rm=TRUE)
reg_daily_tot  <- apply(reg_mass , 3, sum, na.rm=TRUE)
plot(glob_daily_tot, type="l", col="#1f78b4",
ylim=range(c(glob_daily_tot, reg_daily_tot)),
xlab="Day of Year", ylab="NOₓ [kg/day]",
main="Daily NOₓ totals – Italy bounding box")
lines(reg_daily_tot, col="#e31a1c")
legend("topright", c("GLOB 2023","REG 2022"), col=c("#1f78b4","#e31a1c"), lty=1, cex=0.8)
ratio <- glob_daily_tot / reg_daily_tot
summary(ratio)
quantile(ratio, probs=c(0.01,0.25,0.5,0.75,0.99))
library(ggplot2)
library(viridis)   # for discrete viridis_c()
plot_day_emissions <- function(data_matrix, day_index, title=NULL){
lon_vals <- as.numeric(dimnames(data_matrix)[[1]])
lat_vals <- as.numeric(dimnames(data_matrix)[[2]])
df <- expand.grid(lon=lon_vals, lat=lat_vals)
df$value <- as.vector(data_matrix[,,day_index])
ggplot(df, aes(lon, lat, fill=value))+
geom_tile()+
scale_fill_viridis(trans="log10", name="kg/day")+
coord_fixed(1.25)+
labs(title=title, x="Longitude", y="Latitude")+
theme_minimal()
}
plot_day_emissions(glob_mass, 16, "CAMS‑GLOB NOₓ – 16 Jan 2023")
plot_day_emissions(reg_mass, 16, "CAMS‑REG NOₓ – 16 Jan 2022")
SumAllSectors_NOx_2019 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2019.rds")
dimnames(SumAllSectors_NOx_2019)
library(ggplot2)
plot_day_emissions <- function(data_matrix, day_index, title = NULL, save_path = NULL) {
# Estrai la matrice del giorno
daily_data <- data_matrix[,,day_index]
# Estrai le coordinate da dimnames
lon_vals <- as.numeric(dimnames(data_matrix)[[1]])
lat_vals <- as.numeric(dimnames(data_matrix)[[2]])
# Crea il dataframe
df <- expand.grid(
lon = lon_vals,
lat = lat_vals
)
df$value <- as.vector(daily_data)
# Plot base
p <- ggplot(df, aes(x = lon, y = lat, fill = value)) +
geom_tile() +
scale_fill_viridis_c(name = "Emissions", trans = "log10") +
coord_fixed(1.3) +
theme_minimal() +
labs(
title = title %||% paste("Emissions - Day", day_index),
x = "Longitude",
y = "Latitude"
)
# Salva o mostra
if (!is.null(save_path)) {
ggsave(save_path, plot = p, dpi = 300, width = 8, height = 6)
} else {
print(p)
}
}
plot_day_emissions(
data_matrix = SumAllSectors_NOx_2019 * 1e6 * 60 * 60 * 24,
day_index = 16,
title = "NO₂ Emissions - 16 Jan 2019"
)
GLOB_daily_nox_sum_2023 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/DailyFromGLOB/nox/GLOB_daily_nox_sum_2023.rds")
dimnames(GLOB_daily_nox_sum_2023)
SumAllSectors_NOx_2019 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2019.rds")
SumAllSectors_NOx_2022 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2022.rds")
dimnames(SumAllSectors_NOx_2022)
###############################################################################
## PHASE 7: STACK DAILY DATA ALONG YEARS (SEQUENTIALLY) AND SUM ALL SECTORS
###############################################################################
start_time_phase7 <- Sys.time()
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2000
end_year       <- 2022
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# A) Stack daily data per ogni (sector, pollutant)
###############################################################################
for (sector in sectors) {
for (pollutant in polls_stack) {
StackDailyData(
input_folder = input_folder,
sector       = sector,
pollutant    = pollutant,
start_year   = start_year,
end_year     = end_year
)
}
}
cat("==> PHASE 7A: Stacking of daily data for all sectors/pollutants completed.\n\n")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
knitr::opts_chunk$set(
echo      = TRUE,
message   = FALSE,
warning   = FALSE,
fig.width = 7,
fig.height = 4
)
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2000
end_year       <- 2022
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
# Source your configuration and utility scripts
source("Config.R")
source("Utils.R")
source("Computation/ComputeFinal.R")  # Contiene StackDailyData e SumAllSectorsIntoOne
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2019
end_year       <- 2019
# Settori e inquinanti da processare
sectors     <- LETTERS[1:12]
polls_stack <- c("NOx")
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
# Impostazioni generali
input_folder   <- "Data/Processed/DAILY_data"
start_year     <- 2019
end_year       <- 2020
###############################################################################
# B) Somma di tutti i settori anno per anno in EM_sum
###############################################################################
stacked_folder  <- file.path(input_folder, "DailyAlongYears")
out_folder_EM   <- file.path(input_folder, "EM_sum")
dir.create(out_folder_EM, recursive = TRUE, showWarnings = FALSE)
for (poll in polls_stack) {
message("Summing all sectors for pollutant: ", poll)
SumAllSectorsIntoOne(
input_folder  = stacked_folder,   # leggi i file impilati
pollutant     = poll,
start_year    = start_year,
end_year      = end_year,
output_folder = out_folder_EM     # qui i file per anno
)
message("✔️  Saved summed data for ", poll, " in ", out_folder_EM, "\n")
}
SumAllSectors_NOx_2009 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2009.rds")
SumAllSectors_NOx_2009 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/EM_sum/SumAllSectors_NOx_2009.rds")
