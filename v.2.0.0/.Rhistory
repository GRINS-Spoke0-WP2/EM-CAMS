weekly_df <- profs$weekly
# Cartella output
out_dir <- file.path("Data/Processed/DAILY_data/MonthlySimplified", pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)
# Loop anni
for (iy in seq_along(yr_n)) {
year <- yr_n[iy]
# Loop mesi
for (im in seq_along(mon_n)) {
month <- mon_n[im]
ndays <- days_in_month_vec(year, month)
dates <- seq.Date(make_date(year, month, 1), by = "day", length.out = ndays)
wds <- weekday_index(dates)
# Output array [lat, lon, sector, day]
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(1:ndays)))
# Per ogni settore: moltiplica mensile per peso settimanale
for (s in seq_along(sec_n)) {
sector <- sec_n[s]
# estrai valore mensile (stesso per ogni giorno)
Mval <- monthlyData[,,s,im,iy]
# estrai vettore di 7 pesi settimanali
wk_vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(wk_vals) != 7) stop(paste("Profilo weekly non trovato per settore:", sector))
# per ogni giorno d: peso = monthly value * wk_vals[wds[d]]
for (d in seq_len(ndays)) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
# Salva RDS
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir, fname))
gc()
}
message("Anno ", year, " completato.")
}
message("Tutti i dati giornalieri generati per ", pollutant_name)
}
# Esempio di utilizzo:
monthly <- readRDS("Data/Processed/ANT_data/GLOB_ANT_monthly_data_nox.rds")
Path_WeeklySimplified <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
DailyDataFromMonthlySimplifiedCSV(
monthlyData    = monthly,
pollutant_name = "nox",
monthly_csv    = NULL,
weekly_csv     = Path_WeeklySimplified
)
# Funzione principale: distribuisce monthlyData su giorni, usando solo weekly_df
DailyDataFromMonthlySimplifiedCSV <- function(monthlyData, pollutant_name,
weekly_csv) {
# monthlyData: array [lat, lon, sector, month, year]
# monthly_csv: path CSV mensili (ma non servono qui)
# weekly_csv:  path CSV settimanali
# Dimensioni e nomi
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
# Carica solo profili weekly
profs <- SimpleProfilesExtraction(NULL, weekly_csv, pollutant_name)
weekly_df <- profs$weekly
# Cartella output
out_dir <- file.path("Data/Processed/DAILY_data/MonthlySimplified", pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)
# Loop anni
for (iy in seq_along(yr_n)) {
year <- yr_n[iy]
# Loop mesi
for (im in seq_along(mon_n)) {
month <- mon_n[im]
ndays <- days_in_month_vec(year, month)
dates <- seq.Date(make_date(year, month, 1), by = "day", length.out = ndays)
wds <- weekday_index(dates)
# Output array [lat, lon, sector, day]
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(1:ndays)))
# Per ogni settore: moltiplica mensile per peso settimanale
for (s in seq_along(sec_n)) {
sector <- sec_n[s]
# estrai valore mensile (stesso per ogni giorno)
Mval <- monthlyData[,,s,im,iy]
# estrai vettore di 7 pesi settimanali
wk_vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(wk_vals) != 7) stop(paste("Profilo weekly non trovato per settore:", sector))
# per ogni giorno d: peso = monthly value * wk_vals[wds[d]]
for (d in seq_len(ndays)) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
# Salva RDS
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir, fname))
gc()
}
message("Anno ", year, " completato.")
}
message("Tutti i dati giornalieri generati per ", pollutant_name)
}
# Esempio di utilizzo:
monthly <- readRDS("Data/Processed/ANT_data/GLOB_ANT_monthly_data_nox.rds")
Path_WeeklySimplified <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
DailyDataFromMonthlySimplifiedCSV(
monthlyData    = monthly,
pollutant_name = "nox",
weekly_csv     = Path_WeeklySimplified
)
# Dipendenze
library(lubridate)
# Estrae dati CSV per un pollutant e GNFR=settore
offsetCSV_Aggregate <- function(file_path, poll) {
if (!file.exists(file_path) || !is.character(file_path)) {
stop("Percorso CSV settimanali non valido: ", file_path)
}
df <- read.csv(file_path, header = TRUE, sep = ",", stringsAsFactors = FALSE)
df <- df[df$POLL == poll & df$ISO3 == "ITA", ]
return(df)
}
# Ritorna weekday index lun=1 ... dom=7 per vector di Date
get_weekday_index <- function(dates) {
# lubridate::wday: Sunday=1 ... Saturday=7; we want Monday=1..Sunday=7
w <- wday(dates, week_start = 1)
return(w)
}
# Numero di giorni in un mese
days_in_month_vec <- function(year, month) {
days_in_month(make_date(year, month, 1))
}
# Funzione principale: distribuisce monthlyData su giorni, usando solo weekly_df
distribute_monthly_to_daily <- function(monthlyData,
pollutant_name,
weekly_csv_path) {
# monthlyData: array [lat, lon, sector, month, year]
# weekly_csv_path: string, percorso al CSV settimanali
# Validazioni
if (!is.array(monthlyData) || length(dim(monthlyData)) != 5) {
stop("monthlyData deve essere un array 5D [lat,lon,sector,month,year]")
}
if (!is.character(weekly_csv_path)) {
stop("weekly_csv_path deve essere una stringa di percorso")
}
# Dimensioni e nomi
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
# Carica profilo settimanale
weekly_df <- offsetCSV_Aggregate(weekly_csv_path, pollutant_name)
# Estrai vettori settimanali per ogni settore
weekly_list <- lapply(sec_n, function(sector) {
vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(vals) != 7) stop("Profilo weekly non trovato per settore: ", sector)
return(vals)
})
names(weekly_list) <- sec_n
# Crea cartella output
out_dir <- file.path("Data/Processed/DAILY_data/MonthlySimplified", pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)
# Loop anni e mesi
for (iy in seq_along(yr_n)) {
year <- yr_n[iy]
for (im in seq_along(mon_n)) {
month <- mon_n[im]
ndays <- days_in_month_vec(year, month)
dates <- seq.Date(make_date(year, month, 1), by = "day", length.out = ndays)
wds <- get_weekday_index(dates)
# Inizializza array giornaliero
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(seq_len(ndays))))
# Distribuisci valori
for (s in seq_along(sec_n)) {
Mval <- monthlyData[,,s,im,iy]
wk_vals <- weekly_list[[sec_n[s]]]
for (d in seq_len(ndays)) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
# Salva RDS
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir, fname))
gc()
}
message("Anno ", year, " completato.")
}
message("Tutti i dati giornalieri generati per ", pollutant_name)
}
# Esempio di utilizzo:
monthly <- readRDS("Data/Processed/ANT_data/GLOB_ANT_monthly_data_nox.rds")
Path_WeeklySimplified <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
distribute_monthly_to_daily(
monthlyData       = monthly,
pollutant_name    = "nox",
weekly_csv_path   = Path_WeeklySimplified
)
D_GLOB_daily_nox_2025_11 <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/DAILY_data/MonthlySimplified/nox/D_GLOB_daily_nox_2025_11.rds")
D_GLOB_daily_nox_2025_11
# 1) Carica librerie --------------------------------------------------------
library(lubridate)
# 2) Definisci percorsi ------------------------------------------------------
weekly_csv_path <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
monthly_rds_path <- "Data/Processed/ANT_data/GLOB_ANT_monthly_data_nox.rds"
output_dir_base <- "Data/Processed/DAILY_data/MonthlySimplified"
pollutant_name <- "nox"
# 3) Carica dati mensili GLOB -----------------------------------------------
monthlyData <- readRDS(monthly_rds_path)
str(monthlyData)  # controlla dimensioni e nomi delle dimensioni
monthly_rds_path <- "Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds"
output_dir_base <- "Data/Processed/DAILY_data/MonthlySimplified"
pollutant_name <- "nox"
# 3) Carica dati mensili GLOB -----------------------------------------------
monthlyData <- readRDS(monthly_rds_path)
str(monthlyData)  # controlla dimensioni e nomi delle dimensioni
dim(GLOB_GNFR_monthly_data_nox)
dimnames(GLOB_GNFR_monthly_data_nox)
GLOB_GNFR_monthly_data_nox <- readRDS("~/Documents/Projects/R/EM-CAMS/v.2.0.0/Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds")
dimnames(GLOB_GNFR_monthly_data_nox)
lon_lat_idx_GLOB$lon[[lon_lat_idx_GLOB$lon_idx]]
lon_lat_idx_GLOB$lon[[lon_lat_idx_GLOB$lon_idx]]
lon_lat_idx_GLOB$lon[[lon_lat_idx_GLOB$lon_idx]]
lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
lon_lat_idx_GLOB$lat[lon_lat_idx_GLOB$lat_idx]
dimnames(GLOB_GNFR_ANT_monthly_data_nox)
dimnames(monthlyData)[1]<-lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
dimnames(monthlyData)[2] lon_lat_idx_GLOB$lat[lon_lat_idx_GLOB$lat_idx]
dimnames(monthlyData)[[1]]<-lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
dimnames(monthlyData)
dimnames(monthlyData)[[1]]<-lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
dimnames(monthlyData)[[2]]<-lon_lat_idx_GLOB$lat[lon_lat_idx_GLOB$lat_idx]
dimnames(monthlyData)[[4]]<-seq_along(1:12)
dimnames(monthlyData)[[5]]<-seq_along(2023:2025)
dimnames(monthlyData)
dimnames(monthlyData)[[5]]<-c("2023","2024","2025")
dimnames(monthlyData)
# 4) Estrai dimensioni -------------------------------------------------------
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
cat("Anni da processare:", yr_n, "\n")
cat("Mesi da processare:", mon_n, "\n")
# 5) Carica profili settimanali CSV ------------------------------------------
if (!file.exists(weekly_csv_path)) stop("File CSV settimanali non trovato: ", weekly_csv_path)
weekly_df <- read.csv(weekly_csv_path, header=TRUE, sep=",", stringsAsFactors=FALSE)
# Filtra per pollutant e Italia
weekly_df <- weekly_df[weekly_df$POLL == pollutant_name & weekly_df$ISO3 == "ITA", ]
if (nrow(weekly_df) == 0) stop("Nessun profilo trovato per ", pollutant_name)
# Prepara lista di pesi settimanali per settore
weekly_list <- list()
for (sector in sec_n) {
vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(vals) != 7) stop("Profilo weekly non trovato per settore: ", sector)
weekly_list[[sector]] <- vals
}
# 6) Crea cartella output ---------------------------------------------------
out_dir <- file.path(output_dir_base, pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive=TRUE)
# 7) Loop su anni e mesi ----------------------------------------------------
for (year in yr_n) {
cat("Elaborazione anno", year, "...\n")
for (month in mon_n) {
cat("  Mese", month, "... ")
# Calcola date e weekday index
ndays <- days_in_month(make_date(year, month, 1))
dates <- seq.Date(make_date(year, month, 1), by="day", length.out=ndays)
wds <- wday(dates, week_start=1)  # Monday=1..Sunday=7
# Inizializza array per il mese
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(1:ndays)))
# Popola array
for (s in seq_along(sec_n)) {
sector <- sec_n[s]
Mval <- monthlyData[,,s, which(mon_n==month), which(yr_n==year)]
wk_vals <- weekly_list[[sector]]
for (d in 1:ndays) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
# Salva risultato
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir, fname))
cat("fatto e salvato", fname, "\n")
rm(DailyData)
gc()
}
}
cat("Tutti i dati giornalieri generati per", pollutant_name, "\n")
# 2) Definisci percorsi ------------------------------------------------------
weekly_csv_path <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
monthly_rds_path <- "Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds"
output_dir_base <- "Data/Processed/DAILY_data/MonthlySimplified"
pollutant_name <- "nox"
# 3) Carica dati mensili GLOB -----------------------------------------------
monthlyData <- readRDS(monthly_rds_path)
str(monthlyData)  # controlla dimensioni e nomi delle dimensioni
dimnames(monthlyData)[[1]]<-lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
dimnames(monthlyData)[[2]]<-lon_lat_idx_GLOB$lat[lon_lat_idx_GLOB$lat_idx]
dimnames(monthlyData)[[4]]<-seq_along(1:12)
dimnames(monthlyData)[[5]]<-c("2023","2024","2025")
# 4) Estrai dimensioni -------------------------------------------------------
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
cat("Anni da processare:", yr_n, "\n")
cat("Mesi da processare:", mon_n, "\n")
# 5) Carica profili settimanali CSV ------------------------------------------
if (!file.exists(weekly_csv_path)) stop("File CSV settimanali non trovato: ", weekly_csv_path)
weekly_df <- read.csv(weekly_csv_path, header=TRUE, sep=",", stringsAsFactors=FALSE)
# Filtra per pollutant e Italia
weekly_df <- weekly_df[weekly_df$POLL == pollutant_name & weekly_df$ISO3 == "ITA", ]
if (nrow(weekly_df) == 0) stop("Nessun profilo trovato per ", pollutant_name)
# Prepara lista di pesi settimanali per settore
weekly_list <- list()
for (sector in sec_n) {
vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(vals) != 7) stop("Profilo weekly non trovato per settore: ", sector)
weekly_list[[sector]] <- vals
}
# 6) Crea cartella output ---------------------------------------------------
out_dir <- file.path(output_dir_base, pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive=TRUE)
# 7) Loop su anni e mesi ----------------------------------------------------
for (year in yr_n) {
cat("Elaborazione anno", year, "...\n")
for (month in mon_n) {
cat("  Mese", month, "... ")
# Calcola date e weekday index
ndays <- days_in_month(make_date(year, month, 1))
dates <- seq.Date(make_date(year, month, 1), by="day", length.out=ndays)
wds <- wday(dates, week_start=1)  # Monday=1..Sunday=7
# Inizializza array per il mese
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(1:ndays)))
# Popola array
for (s in seq_along(sec_n)) {
sector <- sec_n[s]
Mval <- monthlyData[,,s, which(mon_n==month), which(yr_n==year)]
wk_vals <- weekly_list[[sector]]
for (d in 1:ndays) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
# Salva risultato
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir, fname))
cat("fatto e salvato", fname, "\n")
rm(DailyData)
gc()
}
}
cat("Tutti i dati giornalieri generati per", pollutant_name, "\n")
# Calcola date e weekday index
ndays <- days_in_month(make_date(year, month, 1))
cat("  Mese", month, "... ")
# Calcola date e weekday index
ndays <- days_in_month(make_date(year, month, 1))
dates <- seq.Date(make_date(year, month, 1), by="day", length.out=ndays)
wds <- wday(dates, week_start=1)  # Monday=1..Sunday=7
# Inizializza array per il mese
DailyData <- array(0,
dim = c(dims[1], dims[2], dims[3], ndays),
dimnames = list(lat_n, lon_n, sec_n, as.character(1:ndays)))
weely_list
# 5) Carica profili settimanali CSV ------------------------------------------
if (!file.exists(weekly_csv_path)) stop("File CSV settimanali non trovato: ", weekly_csv_path)
weekly_df <- read.csv(weekly_csv_path, header=TRUE, sep=",", stringsAsFactors=FALSE)
# Filtra per pollutant e Italia
weekly_df <- weekly_df[weekly_df$POLL == pollutant_name & weekly_df$ISO3 == "ITA", ]
if (nrow(weekly_df) == 0) stop("Nessun profilo trovato per ", pollutant_name)
# Prepara lista di pesi settimanali per settore
weekly_list <- list()
for (sector in sec_n) {
vals <- as.numeric(weekly_df[weekly_df$GNFR == sector, 4:10])
if (length(vals) != 7) stop("Profilo weekly non trovato per settore: ", sector)
weekly_list[[sector]] <- vals
}
weekly_df
# 1) Carica librerie --------------------------------------------------------
library(lubridate)
# 2) Definisci percorsi ------------------------------------------------------
weekly_rds_path  <- "Data/Processed/TEMPO_data/DailySimplifiedProfiles/nox/WeeklyProfiles/S_W_simplified_nox.rds"
monthly_rds_path <- "Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds"
output_dir_base  <- "Data/Processed/DAILY_data/MonthlySimplified"
pollutant_name   <- "nox"
# 3) Carica dati mensili GLOB -----------------------------------------------
monthlyData <- readRDS(monthly_rds_path)
# 2) Definisci percorsi ------------------------------------------------------
weekly_rds_path  <- "Data/Processed/TEMPO_data/DailySimplifiedProfiles/nox/WeeklyProfiles/S_W_simplified_nox.rds"
monthly_rds_path <- "Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds"
output_dir_base  <- "Data/Processed/DAILY_data/MonthlySimplified"
pollutant_name   <- "nox"
# 3) Carica dati mensili GLOB -----------------------------------------------
monthlyData <- readRDS(monthly_rds_path)
str(monthlyData)  # controlla dimensioni e nomi delle dimensioni
# Ripristina nomi dimensioni se necessario (lon/lat)
dimnames(monthlyData)[[1]] <- lon_lat_idx_GLOB$lon[lon_lat_idx_GLOB$lon_idx]
dimnames(monthlyData)[[2]] <- lon_lat_idx_GLOB$lat[lon_lat_idx_GLOB$lat_idx]
dimnames(monthlyData)[[4]] <- as.character(1:12)
dimnames(monthlyData)[[5]] <- c("2023","2024","2025")
# 4) Estrai dimensioni -------------------------------------------------------
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
cat("Sectors:", sec_n, "\n")
cat("Years:", yr_n, "; Months:", mon_n, "\n")
# 5) Carica profili settimanali da RDS ---------------------------------------
if (!file.exists(weekly_rds_path)) {
stop("File weekly RDS non trovato: ", weekly_rds_path)
}
weekly_array <- readRDS(weekly_rds_path)
# Verifica dimensioni: 7 giorni x n_sectors
stopifnot(nrow(weekly_array) == 7, ncol(weekly_array) == length(sec_n))
# 1) Carica librerie --------------------------------------------------------
library(lubridate)
library(dplyr)
# 2) Funzione SimpleProfilesCreation ----------------------------------------
# Legge CSV mensili e settimanali semplificati, salva profili weekly RDS e daily simplified RDS
SimpleProfilesCreation <- function(monthly_csv, weekly_csv, poll, start_year, end_year) {
# Estrai dati CSV
monthly_profile <- read.csv(monthly_csv, header=TRUE, sep=",", stringsAsFactors=FALSE) %>%
filter(POLL == poll & ISO3 == "ITA")
weekly_profile  <- read.csv(weekly_csv, header=TRUE, sep=",", stringsAsFactors=FALSE) %>%
filter(POLL == poll & ISO3 == "ITA")
# Directory output
base_dir <- file.path("Data/Processed/TEMPO_data/DailySimplifiedProfiles", poll)
if (!dir.exists(base_dir)) dir.create(base_dir, recursive=TRUE)
weekly_dir <- file.path(base_dir, "WeeklyProfiles")
if (!dir.exists(weekly_dir)) dir.create(weekly_dir)
# Salva profilo weekly: array 7 giorni x settori
sectors <- unique(monthly_profile$GNFR)
n_sec <- length(sectors)
weekly_array <- matrix(0, nrow=7, ncol=n_sec, dimnames=list(1:7, sectors))
for (i in seq_along(sectors)) {
sec <- sectors[i]
weights <- weekly_profile %>% filter(GNFR==sec) %>% select(4:10) %>% unlist()
weekly_array[,i] <- weights
}
saveRDS(weekly_array, file.path(weekly_dir, paste0("S_W_simplified_", poll, ".rds")))
}
# 3) Definisci percorsi ------------------------------------------------------
Path_MonthlyCSV   <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Monthly_Factors.csv"
Path_WeeklyCSV    <- "Data/Raw/CAMS-REG-TEMPO-SIMPLIFIED/CAMS_TEMPO_v4_1_simplified_Weekly_Factors.csv"
pollutant_name    <- "nox"
start_year_simpl  <- 2023
end_year_simpl    <- 2025
# Genera e salva profili weekly da CSV
message("Creazione profili semplificati weekly per ", pollutant_name)
SimpleProfilesCreation(Path_MonthlyCSV, Path_WeeklyCSV,
pollutant_name, start_year_simpl, end_year_simpl)
# 4) Definisci ulteriori percorsi e carica dati ------------------------------
weekly_rds_path   <- file.path("Data/Processed/TEMPO_data/DailySimplifiedProfiles",
pollutant_name, "WeeklyProfiles",
paste0("S_W_simplified_", pollutant_name, ".rds"))
monthly_rds_path  <- "Data/Processed/ANT_data/GLOB_GNFR_monthly_data_nox.rds"
output_dir_base   <- "Data/Processed/DAILY_data/MonthlySimplified"
# Carica GLOB mensili
monthlyData <- readRDS(monthly_rds_path)
str(monthlyData)
# 5) Estrai dimensioni -------------------------------------------------------
dims <- dim(monthlyData)
lat_n <- dimnames(monthlyData)[[1]]
lon_n <- dimnames(monthlyData)[[2]]
sec_n <- dimnames(monthlyData)[[3]]
mon_n <- as.integer(dimnames(monthlyData)[[4]])
yr_n  <- as.integer(dimnames(monthlyData)[[5]])
# 6) Carica profilo weekly RDS ----------------------------------------------
if (!file.exists(weekly_rds_path)) stop("Weekly RDS non trovato: ", weekly_rds_path)
weekly_array <- readRDS(weekly_rds_path)
stopifnot(nrow(weekly_array)==7, ncol(weekly_array)==length(sec_n))
# 7) Prepara cartella output ------------------------------------------------
out_dir <- file.path(output_dir_base, pollutant_name)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive=TRUE)
# 8) Loop su anni e mesi ----------------------------------------------------
for (year in yr_n) {
message("Processing year: ", year)
for (month in mon_n) {
message("  Month: ", month)
ndays <- days_in_month(make_date(year, month,1))
dates <- seq.Date(make_date(year,month,1), by="day", length.out=ndays)
wds <- wday(dates, week_start=1)
DailyData <- array(0,
dim=c(dims[1],dims[2],dims[3],ndays),
dimnames=list(lat_n,lon_n,sec_n,as.character(1:ndays)))
for (s in seq_along(sec_n)) {
Mval <- monthlyData[,,s, which(mon_n==month), which(yr_n==year)]
wk_vals <- weekly_array[,s]
for (d in seq_len(ndays)) {
DailyData[,,s,d] <- Mval * wk_vals[wds[d]]
}
}
fname <- sprintf("D_GLOB_daily_%s_%04d_%02d.rds", pollutant_name, year, month)
saveRDS(DailyData, file.path(out_dir,fname))
message("    Saved: ", fname)
rm(DailyData); gc()
}
}
message("Tutti i dati giornalieri generati per ", pollutant_name)
